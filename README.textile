h1. Parallelisable ROAR

This branch is to get some discussion going around how to parallelise ROAR requests, and contains some proof of concept code. It's not intended to be mergeable  code - for one thing I couldn't even get the tests to run let alone see if they all passed or not.

It adds a Typhoeus/Faraday transport option, and, as a proof of concept, returns a proc for the results if the request is non-blocking and not completed.

If your client used to have code like:

<pre>
  model1s = Model1.get 'http://model1', 'json'
  model2s = Model2.get 'http://model2', 'json'
</pre>

Then you can parallelise these with:

<pre>
  require 'roar/representer/transport/typhoeus'
  Roar::Representer::Feature::HttpVerbs.transport_engine = Roar::Representer::Transport::Typhoeus
  model1s,model2s=nil,nil
  Roar::Representer::Transport::Typhoeus.client.in_parallel do
    model1s = Model1.get 'http://model1', 'json'
    model2s = Model2.get 'http://model2', 'json'
    # Requests have not completed here
  end
  # Requests have completed here, procs returned
  model1s = model1s.call
  model2s = model2s.call
</pre>
